name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CLAUDE.md'
      - 'src/**/*.py'
      - '.github/workflows/docs.yml'
      - 'mkdocs.yml'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CLAUDE.md'
      - 'src/**/*.py'
      - 'mkdocs.yml'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "0.5.13"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev --no-install-workspace
        uv pip install -e .

    - name: Check README validity
      run: |
        echo "📖 Checking README.md..."
        if [[ ! -f "README.md" ]]; then
          echo "❌ README.md not found!"
          exit 1
        fi
        
        # Check for required sections
        REQUIRED_SECTIONS=(
          "Installation"
          "Usage"
          "Configuration"
          "Features"
        )
        
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -i "## $section\|# $section" README.md > /dev/null; then
            echo "⚠️  README.md missing section: $section"
          fi
        done
        
        echo "✅ README.md check completed"

    - name: Check docstring coverage
      run: |
        echo "📝 Checking docstring coverage..."
        
        # Install docstring coverage tool
        uv pip install interrogate
        
        # Check docstring coverage
        uv run interrogate -v -i --fail-under=70 src/voice_mcp/
        
        echo "✅ Docstring coverage check completed"

    - name: Validate code examples
      run: |
        echo "🧪 Validating code examples in documentation..."
        
        # Extract and test code examples from README
        if grep -n '```python' README.md > /dev/null; then
          echo "Found Python code examples in README"
          
          # Extract code blocks and create a test file
          awk '/```python/,/```/' README.md | grep -v '```' > test_examples.py || true
          
          if [[ -s test_examples.py ]]; then
            echo "Testing extracted code examples..."
            # Basic syntax check
            python -m py_compile test_examples.py && echo "✅ Syntax check passed" || echo "⚠️  Syntax issues in examples"
            rm -f test_examples.py
          fi
        fi

    - name: Check for broken internal links
      run: |
        echo "🔗 Checking for broken internal links..."
        
        # Check README for internal links
        if [[ -f "README.md" ]]; then
          # Find markdown links
          grep -oE '\[.*\]\([^)]+\)' README.md | grep -oE '\([^)]+\)' | tr -d '()' | while read link; do
            # Skip external links
            if [[ "$link" =~ ^https?:// ]]; then
              continue
            fi
            
            # Check if internal file exists
            if [[ ! -f "$link" && ! -d "$link" ]]; then
              echo "⚠️  Broken internal link: $link"
            fi
          done
        fi
        
        echo "✅ Internal link check completed"

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: check-docs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git-based features

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "0.5.13"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev --no-install-workspace
        uv pip install -e .

    - name: Check for MkDocs configuration
      id: mkdocs-check
      run: |
        if [[ -f "mkdocs.yml" ]]; then
          echo "has_mkdocs=true" >> $GITHUB_OUTPUT
          echo "📚 MkDocs configuration found"
        else
          echo "has_mkdocs=false" >> $GITHUB_OUTPUT
          echo "📝 No MkDocs configuration - will create basic documentation"
        fi

    - name: Create MkDocs configuration
      if: steps.mkdocs-check.outputs.has_mkdocs == 'false'
      run: |
        echo "📝 Creating basic MkDocs configuration..."
        
        cat > mkdocs.yml << EOF
        site_name: Voice MCP Server
        site_description: A comprehensive Python implementation of a Model Context Protocol (MCP) server providing advanced text-to-speech (TTS), speech-to-text (STT), and global hotkey monitoring for AI assistants.
        site_url: https://voice-mcp.github.io/voice-mcp/
        repo_url: https://github.com/voice-mcp/voice-mcp
        repo_name: voice-mcp/voice-mcp
        
        theme:
          name: material
          palette:
            - scheme: default
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-7
                name: Switch to dark mode
            - scheme: slate
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-4
                name: Switch to light mode
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.expand
            - navigation.top
            - search.highlight
            - content.code.copy
        
        nav:
          - Home: index.md
          - Installation: installation.md
          - Configuration: configuration.md
          - Usage: usage.md
          - API Reference: api.md
          - Examples: examples.md
          - Troubleshooting: troubleshooting.md
        
        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  paths: [src]
                  options:
                    docstring_style: google
        
        markdown_extensions:
          - pymdownx.highlight:
              anchor_linenums: true
          - pymdownx.inlinehilite
          - pymdownx.snippets
          - pymdownx.superfences
          - admonition
          - pymdownx.details
          - pymdownx.tabbed:
              alternate_style: true
          - attr_list
          - md_in_html
        EOF

    - name: Create documentation structure
      run: |
        echo "📁 Creating documentation structure..."
        
        mkdir -p docs
        
        # Create index page from README if it doesn't exist
        if [[ ! -f "docs/index.md" ]]; then
          if [[ -f "README.md" ]]; then
            cp README.md docs/index.md
          else
            cat > docs/index.md << EOF
        # Voice MCP Server
        
        A comprehensive Python implementation of a Model Context Protocol (MCP) server providing advanced text-to-speech (TTS), speech-to-text (STT), and global hotkey monitoring for AI assistants.
        
        ## Quick Start
        
        \`\`\`bash
        pip install voice-mcp
        voice-mcp --help
        \`\`\`
        
        ## Features
        
        - 🗣️ Text-to-Speech with Coqui TTS neural models
        - 🎤 Speech-to-Text with faster-whisper
        - ⌨️ Global hotkey monitoring
        - 🎛️ Advanced audio processing
        - 📝 Multiple text output modes
        
        For detailed information, see the other pages in this documentation.
        EOF
          fi
        fi
        
        # Create basic pages if they don't exist
        if [[ ! -f "docs/installation.md" ]]; then
          cat > docs/installation.md << EOF
        # Installation
        
        ## Requirements
        
        - Python 3.11 or higher
        - Audio input/output devices
        - System dependencies for audio processing
        
        ## Install from PyPI
        
        \`\`\`bash
        pip install voice-mcp
        \`\`\`
        
        ## Development Installation
        
        \`\`\`bash
        git clone https://github.com/voice-mcp/voice-mcp.git
        cd voice-mcp
        uv sync --dev
        uv pip install -e .
        \`\`\`
        
        ## System Dependencies
        
        ### Ubuntu/Debian
        \`\`\`bash
        sudo apt-get install portaudio19-dev python3-dev gcc g++ make
        \`\`\`
        
        ### macOS
        \`\`\`bash
        brew install portaudio
        \`\`\`
        EOF
        fi
        
        if [[ ! -f "docs/configuration.md" ]]; then
          cat > docs/configuration.md << EOF
        # Configuration
        
        Voice MCP Server can be configured using environment variables.
        
        ## Core Configuration
        
        | Variable | Default | Description |
        |----------|---------|-------------|
        | \`VOICE_MCP_LOG_LEVEL\` | \`INFO\` | Logging level |
        | \`VOICE_MCP_DEBUG\` | \`false\` | Enable debug mode |
        
        ## TTS Configuration  
        
        | Variable | Default | Description |
        |----------|---------|-------------|
        | \`VOICE_MCP_TTS_MODEL\` | \`tts_models/en/ljspeech/tacotron2-DDC\` | Coqui TTS model |
        | \`VOICE_MCP_TTS_RATE\` | \`1.0\` | Speech rate multiplier |
        | \`VOICE_MCP_TTS_VOLUME\` | \`0.9\` | Volume level |
        
        ## STT Configuration
        
        | Variable | Default | Description |
        |----------|---------|-------------|
        | \`VOICE_MCP_STT_MODEL\` | \`base\` | Whisper model size |
        | \`VOICE_MCP_STT_LANGUAGE\` | \`en\` | Default language |
        | \`VOICE_MCP_STT_SILENCE_THRESHOLD\` | \`4.0\` | Silence detection threshold |
        EOF
        fi
        
        if [[ ! -f "docs/usage.md" ]]; then
          cat > docs/usage.md << EOF
        # Usage
        
        ## MCP Server
        
        Start the MCP server:
        
        \`\`\`bash
        voice-mcp --debug
        \`\`\`
        
        ## Available Tools
        
        - \`speak(text, voice?, rate?, volume?)\` - Text-to-speech
        - \`start_hotkey_monitoring()\` - Start global hotkey monitoring
        - \`stop_hotkey_monitoring()\` - Stop hotkey monitoring
        - \`get_hotkey_status()\` - Get status information
        
        ## Examples
        
        See the examples directory for usage examples.
        EOF
        fi
        
        if [[ ! -f "docs/api.md" ]]; then
          cat > docs/api.md << EOF
        # API Reference
        
        ::: voice_mcp.tools
        
        ::: voice_mcp.config
        
        ::: voice_mcp.voice.tts
        
        ::: voice_mcp.voice.stt
        
        ::: voice_mcp.voice.hotkey
        EOF
        fi
        
        echo "✅ Documentation structure created"

    - name: Build documentation
      run: |
        echo "🏗️ Building documentation..."
        uv run mkdocs build --verbose --strict

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/

    - name: Upload to GitHub Pages (if main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-pages-artifact@v3
      with:
        path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [check-docs, build-docs, deploy-docs]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# 📚 Documentation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.check-docs.result }}" == "success" ]]; then
          echo "✅ **Documentation Checks:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Documentation Checks:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-docs.result }}" == "success" ]]; then
          echo "✅ **Documentation Build:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Documentation Build:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
          if [[ "${{ needs.deploy-docs.result }}" == "success" ]]; then
            echo "✅ **Documentation Deploy:** Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Live Documentation:** [View Docs](https://voice-mcp.github.io/voice-mcp/)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Documentation Deploy:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⏭️ **Documentation Deploy:** Skipped (not main branch push)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 View build artifacts above for the generated documentation files." >> $GITHUB_STEP_SUMMARY