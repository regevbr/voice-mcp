[project]
name = "voice-mcp"
version = "0.1.0"
description = "A modern MCP server providing text-to-speech and speech-to-text capabilities"
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11,<3.14"
authors = [
    {name = "Voice MCP Development Team"},
]
keywords = [
    "mcp",
    "model-context-protocol", 
    "voice",
    "tts",
    "stt",
    "speech-to-text",
    "text-to-speech",
    "whisper",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies - Full voice functionality always available
dependencies = [
    # MCP framework
    "mcp>=1.13.1",
    "fastmcp>=0.9.0",
    # Text-to-Speech engines
    "pyttsx3>=2.90",
    "gtts>=2.5.1",
    # Speech-to-Text engines
    "realtimestt>=0.3.104",
    "faster-whisper>=1.0.0",
    "torch>=2.0.0",
    # Audio processing
    "numpy>=1.24.0",
    "pyaudio>=0.2.14",
    "soundfile>=0.12.1",
    "librosa>=0.10.0",
    "webrtcvad>=2.0.10",
    # Input/Output handling
    "pynput>=1.8.1",
    "pyperclip>=1.9.0",
    "pyautogui>=0.9.54",
    # Configuration and logging
    "pydantic>=2.0.0",
    "structlog>=23.1.0",
    # System monitoring
    "psutil>=5.9.0",
    # Utilities
    "typing-extensions>=4.5.0",
    "setuptools-rust>=1.12.0",
]

# Optional dependencies for development only
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0", 
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    
    # Pre-commit
    "pre-commit>=3.3.0",
]

build = [
    "build>=0.10.0",
    "twine>=4.0.0",
]

# Entry points for the MCP server
[project.scripts]
voice-mcp = "voice_mcp.server:main"

[project.urls]
Homepage = "https://github.com/voice-mcp/voice-mcp"
Repository = "https://github.com/voice-mcp/voice-mcp"
Documentation = "https://voice-mcp.readthedocs.io"
"Bug Reports" = "https://github.com/voice-mcp/voice-mcp/issues"

# Build system configuration
[build-system]
requires = ["setuptools>=68", "wheel", "setuptools-rust"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black code formatting configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["voice_mcp"]

# Ruff linting configuration
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "pyaudio.*",
    "pyttsx3.*",
    "gtts.*", 
    "realtimestt.*",
    "webrtcvad.*",
    "pynput.*",
    "pyautogui.*",
    "librosa.*",
    "soundfile.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "voice: marks tests that require audio hardware",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.15.0",
    "ruff>=0.12.12",
]
